# This option controls whether Passenger spawns applications directly,
# or using a prefork copy-on-write mechanism.
passenger_spawn_method smart;

# That is, it will automatically shutdown a preloader process if it
# hasn't done anything for a given period.
# This option allows you to set the preloader's idle timeout, in seconds.
# A value of 0 means that it should never idle timeout.
# Setting a higher value will mean that the preloader is kept around longer, which may slightly
# increase memory usage. But as long as the preloader server is running, the time to spawn a
# Ruby application process only takes about 10% of the time that is normally needed, assuming
# that you're using the smart spawn method. So if your system has enough memory, then is it
# recommended that you set this option to a high value or to 0.
passenger_max_preloader_idle_time 0;

# The maximum number of seconds that an application process may be idle. That is, if an
# application process hasn't received any traffic after the given number of seconds,
# then it will be shutdown in order to conserve memory. (in seonds)
passenger_pool_idle_time 5400;

# The maximum number of requests an application process will process. After serving that many
# requests, the application process will be shut down and Passenger will restart it. A value
# of 0 means that there is no maximum: an application process will thus be shut down when its
# idle timeout has been reached.
passenger_max_requests 0;

# By default, Passenger does not start any application processes until said web application
# is first accessed. The result is that the first visitor of said web application might
# experience a small delay as Passenger is starting the web application on demand.
passenger_pre_start http://localhost/;

# This specifies the minimum number of application processes that should exist for a
# given application. For consistent performance, it is thus recommended that you configure
# a fixed process pool: telling Passenger to use a fixed number of processes, instead of
# spawning and shutting them down dynamically.
passenger_min_instances 1;
passenger_max_pool_size 1;
